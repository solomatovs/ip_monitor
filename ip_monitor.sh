#!/bin/bash

set -euo pipefail

# Default values
PID_LIST=""
OUTPUT_FILE="ips_monitor_$(date +%Y%m%d_%H%M%S).log"
REALTIME=false
VERBOSE=false
KEEP_SCRIPT=false

# Simple argument parsing
while [[ $# -gt 0 ]]; do
    case $1 in
        --output) OUTPUT_FILE="$2"; shift 2 ;;
        --verbose) VERBOSE=true; shift ;;
        --keep-script) KEEP_SCRIPT=true; shift ;;
        --help) 
            echo "Usage: $0 <PID1,PID2> [options]"
            echo "Options: --output FILE, --verbose, --keep-script"
            exit 0 ;;
        *) PID_LIST="$1"; shift ;;
    esac
done

if [[ -z "$PID_LIST" ]]; then
    echo "‚ùå Specify root PIDs: $0 1234,5678"
    exit 1
fi

if [[ $EUID -ne 0 ]]; then
    echo "‚ùå sudo required"
    exit 1
fi

# PID parsing
IFS=',' read -ra PIDS <<< "$PID_LIST"
VALID_PIDS=()

echo "=== Checking root PIDs ==="
for pid in "${PIDS[@]}"; do
    pid=$(echo "$pid" | tr -d ' ')
    if kill -0 "$pid" 2>/dev/null; then
        VALID_PIDS+=("$pid")
        echo "‚úÖ Root PID $pid: $(ps -p "$pid" -o comm= || echo unknown)"
    else
        echo "‚ùå PID $pid: does not exist"
    fi
done

if [ ${#VALID_PIDS[@]} -eq 0 ]; then
    echo "‚ùå No valid root PIDs"
    exit 1
fi

# Preparing values
ROOT_PIDS_LIST="${VALID_PIDS[*]}"

# Creating the final script directly
GENERATED_SCRIPT="generated_ips_monitor_$.d"

[[ "$VERBOSE" == "true" ]] && echo "Creating script: $GENERATED_SCRIPT"

# Create script directly, using template as base
cat > "$GENERATED_SCRIPT" << EOF
#!/usr/sbin/dtrace -Cs

BEGIN {
    printf("=== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ—Ä–Ω–µ–≤—ã—Ö PID –∏ –∏—Ö –ø–æ—Ç–æ–º–∫–æ–≤ ===");
    printf("=== –ö–æ—Ä–Ω–µ–≤—ã–µ PID: ${ROOT_PIDS_LIST} ===");
    connection_count = 0;
    
    /* –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–Ω–µ–≤—ã—Ö PID —á–µ—Ä–µ–∑ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤ */
$(for pid in "${VALID_PIDS[@]}"; do
    echo "    tracked_pids[$pid] = 1;"
done)
    
    printf("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...");
    printf("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º ${#VALID_PIDS[@]} –∫–æ—Ä–Ω–µ–≤—ã—Ö PID");
}

#define IS_TRACKED_PID(check_pid) \\
    (tracked_pids[check_pid] == 1)

proc:::create {
    if (IS_TRACKED_PID(ppid)) {
        tracked_pids[pid] = 1;
        printf("‚ûï –ù–û–í–´–ô_–ü–û–¢–û–ú–û–ö: PID %d —Å–æ–∑–¥–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ–º %d", pid, ppid);
    }
}

proc:::exit {
    /* –û—á–∏—â–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ PID –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ */
    if (tracked_pids[pid] == 1) {
        tracked_pids[pid] = 0;
        printf("üö´ PID_–ó–ê–í–ï–†–®–ï–ù: PID %d", pid);
    }
}

/* –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ probe-—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–∫–µ—Ç–∞—Ö */
syscall::getsockname:entry {
    if (IS_TRACKED_PID(pid)) {
        printf("GETSOCKNAME [PID %d]: FD=%d", pid, arg0);
        self->sockname_fd = arg0;
        self->sockname_addr_ptr = arg1;
        self->sockname_len_ptr = arg2;
    }
}

syscall::getsockname:return {
    if (IS_TRACKED_PID(pid) && self->sockname_addr_ptr != 0) {
        if (arg1 == 0) { /* —É—Å–ø–µ—Ö */
            this->addr_len = *(socklen_t*)copyin(self->sockname_len_ptr, 4);
            if (this->addr_len >= 16) {
                this->addr = copyin(self->sockname_addr_ptr, this->addr_len);
                this->family = *(uint8_t*)((char*)this->addr + 1);
                
                if (this->family == 2) {
                    this->port = *(uint16_t*)((char*)this->addr + 2);
                    this->port = ((this->port & 0xFF) << 8) | ((this->port >> 8) & 0xFF);
                    this->ip = *(uint32_t*)((char*)this->addr + 4);
                    printf("  -> üìç LOCAL IPv4: %d.%d.%d.%d:%d (FD=%d)",
                           this->ip & 0xFF, (this->ip >> 8) & 0xFF,
                           (this->ip >> 16) & 0xFF, (this->ip >> 24) & 0xFF,
                           this->port, self->sockname_fd);
                }
            }
        }
        self->sockname_fd = 0;
        self->sockname_addr_ptr = 0;
        self->sockname_len_ptr = 0;
    }
}

syscall::getpeername:entry {
    if (IS_TRACKED_PID(pid)) {
        printf("GETPEERNAME [PID %d]: FD=%d", pid, arg0);
        self->peername_fd = arg0;
        self->peername_addr_ptr = arg1;
        self->peername_len_ptr = arg2;
    }
}

syscall::getpeername:return {
    if (IS_TRACKED_PID(pid) && self->peername_addr_ptr != 0) {
        if (arg1 == 0) { /* —É—Å–ø–µ—Ö */
            this->addr_len = *(socklen_t*)copyin(self->peername_len_ptr, 4);
            if (this->addr_len >= 16) {
                this->addr = copyin(self->peername_addr_ptr, this->addr_len);
                this->family = *(uint8_t*)((char*)this->addr + 1);
                
                if (this->family == 2) {
                    this->port = *(uint16_t*)((char*)this->addr + 2);
                    this->port = ((this->port & 0xFF) << 8) | ((this->port >> 8) & 0xFF);
                    this->ip = *(uint32_t*)((char*)this->addr + 4);
                    printf("  -> üéØ PEER IPv4: %d.%d.%d.%d:%d (FD=%d)",
                           this->ip & 0xFF, (this->ip >> 8) & 0xFF,
                           (this->ip >> 16) & 0xFF, (this->ip >> 24) & 0xFF,
                           this->port, self->peername_fd);
                    connection_count++;
                }
            }
        }
        self->peername_fd = 0;
        self->peername_addr_ptr = 0;
        self->peername_len_ptr = 0;
    }
}

/* –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ socket —Å–æ–∑–¥–∞–Ω–∏—è —Å –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤ */
syscall::socket:entry {
    if (IS_TRACKED_PID(pid)) {
        printf("SOCKET [PID %d]: domain=%d, type=%d, protocol=%d", 
               pid, arg0, arg1, arg2);
        
        /* –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–∫–µ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ return */
        self->socket_domain = arg0;
        self->socket_type = arg1;
        self->socket_protocol = arg2;
        
        if (arg0 == 1) { printf("  -> AF_UNIX"); }
        else if (arg0 == 2) { printf("  -> AF_INET (IPv4)"); }
        else if (arg0 == 30) { printf("  -> AF_INET6"); }
        else if (arg0 == 32) { printf("  -> AF_SYSTEM"); }
        else { printf("  -> –°–µ–º–µ–π—Å—Ç–≤–æ: %d", arg0); }
        
        if (arg1 == 1) { printf("  -> SOCK_STREAM (TCP)"); }
        else if (arg1 == 2) { printf("  -> SOCK_DGRAM (UDP)"); }
        else { printf("  -> –¢–∏–ø: %d", arg1); }
    }
}

syscall::socket:return {
    if (IS_TRACKED_PID(pid)) {
        if (arg1 >= 0) {
            printf("SOCKET_SUCCESS [PID %d]: FD=%d", pid, arg1);
            
            /* –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–∏–ø —Å–æ–∫–µ—Ç–∞ –¥–ª—è FD */
            if (self->socket_domain == 2 && self->socket_type == 2) {
                printf("  -> üìù –ó–∞–ø–æ–º–Ω–∏–ª–∏ UDP —Å–æ–∫–µ—Ç FD=%d", arg1);
                /* –í –∏–¥–µ–∞–ª–µ –∑–¥–µ—Å—å –±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤, –Ω–æ DTrace –æ–≥—Ä–∞–Ω–∏—á–µ–Ω */
            }
        } else {
            printf("SOCKET_FAILED [PID %d]: error=%d", pid, arg1);
        }
        
        /* –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ */
        self->socket_domain = 0;
        self->socket_type = 0;
        self->socket_protocol = 0;
    }
}

syscall::connect:entry {
    if (IS_TRACKED_PID(pid)) {
        printf("CONNECT_ENTRY [PID %d]: FD=%d, addr_len=%d", 
               pid, arg0, arg2);
        
        if (arg2 >= 16) {
            this->addr = copyin(arg1, 16);
            this->family = *(uint8_t*)((char*)this->addr + 1);
            
            if (this->family == 2) {
                this->port = *(uint16_t*)((char*)this->addr + 2);
                this->port = ((this->port & 0xFF) << 8) | ((this->port >> 8) & 0xFF);
                this->ip = *(uint32_t*)((char*)this->addr + 4);
                printf("  -> üéØ IPv4: %d.%d.%d.%d:%d",
                       this->ip & 0xFF, (this->ip >> 8) & 0xFF,
                       (this->ip >> 16) & 0xFF, (this->ip >> 24) & 0xFF,
                       this->port);
                connection_count++;
            }
            else if (this->family == 30) {
                this->port = *(uint16_t*)((char*)this->addr + 2);
                this->port = ((this->port & 0xFF) << 8) | ((this->port >> 8) & 0xFF);
                printf("  -> üéØ IPv6 –ø–æ—Ä—Ç: %d", this->port);
                connection_count++;
            }
            else if (this->family == 1) {
                printf("  -> Unix socket");
            }
            else if (this->family == 32) {
                printf("  -> AF_SYSTEM (macOS IPC)");
            }
            else {
                printf("  -> –°–µ–º–µ–π—Å—Ç–≤–æ: %d", this->family);
            }
        }
    }
}

syscall::connect:return {
    if (IS_TRACKED_PID(pid)) {
        if (arg1 == 0) {
            printf("‚úÖ CONNECT_SUCCESS [PID %d]", pid);
        } else {
            printf("‚ùå CONNECT_FAILED [PID %d]: error=%d", pid, arg1);
        }
    }
}

syscall::sendto:entry {
    if (IS_TRACKED_PID(pid)) {
        printf("SENDTO [PID %d]: FD=%d, bytes=%d, addr_len=%d", 
               pid, arg0, arg2, arg5);
        
        if (arg5 >= 16) {
            /* arg4 = –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, arg5 = –¥–ª–∏–Ω–∞ –∞–¥—Ä–µ—Å–∞ */
            this->addr = copyin(arg4, arg5);
            this->family = *(uint8_t*)((char*)this->addr + 1);
            
            if (this->family == 2) {
                /* IPv4 –∞–¥—Ä–µ—Å */
                this->port = *(uint16_t*)((char*)this->addr + 2);
                this->port = ((this->port & 0xFF) << 8) | ((this->port >> 8) & 0xFF);
                this->ip = *(uint32_t*)((char*)this->addr + 4);
                printf("  -> üéØ IPv4: %d.%d.%d.%d:%d",
                       this->ip & 0xFF, (this->ip >> 8) & 0xFF,
                       (this->ip >> 16) & 0xFF, (this->ip >> 24) & 0xFF,
                       this->port);
                connection_count++;
            }
            else if (this->family == 30) {
                /* IPv6 –∞–¥—Ä–µ—Å */
                this->port = *(uint16_t*)((char*)this->addr + 2);
                this->port = ((this->port & 0xFF) << 8) | ((this->port >> 8) & 0xFF);
                printf("  -> üéØ IPv6 –ø–æ—Ä—Ç: %d", this->port);
                connection_count++;
            }
            else if (this->family == 1) {
                printf("  -> Unix socket");
            }
            else {
                printf("  -> –°–µ–º–µ–π—Å—Ç–≤–æ: %d", this->family);
            }
        } else if (arg5 == 0) {
            printf("  -> –ë–µ–∑ –∞–¥—Ä–µ—Å–∞ (–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π UDP)");
        } else {
            printf("  -> –ö–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Å (–¥–ª–∏–Ω–∞: %d)", arg5);
        }
    }
}

syscall::sendto:return {
    if (IS_TRACKED_PID(pid)) {
        if (arg1 >= 0) {
            printf("‚úÖ SENDTO_SUCCESS [PID %d]: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ=%d –±–∞–π—Ç", pid, arg1);
        } else {
            printf("‚ùå SENDTO_FAILED [PID %d]: error=%d", pid, arg1);
        }
    }
}

syscall::recvfrom:entry {
    if (IS_TRACKED_PID(pid)) {
        printf("RECVFROM_ENTRY [PID %d]: FD=%d, buf_size=%d", pid, arg0, arg2);
        
        /* –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ return */
        self->recvfrom_addr_ptr = arg4;  /* –±—É—Ñ–µ—Ä –¥–ª—è –∞–¥—Ä–µ—Å–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ */
        self->recvfrom_addr_len_ptr = arg5; /* —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –¥–ª–∏–Ω—É –∞–¥—Ä–µ—Å–∞ */
    }
}

syscall::recvfrom:return {
    if (IS_TRACKED_PID(pid) && arg1 > 0) {
        printf("RECVFROM [PID %d]: bytes=%d", pid, arg1);
        
        /* –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—Ä–æ—à–µ–Ω */
        if (self->recvfrom_addr_ptr != 0 && self->recvfrom_addr_len_ptr != 0) {
            this->addr_len = *(socklen_t*)copyin(self->recvfrom_addr_len_ptr, 4);
            
            if (this->addr_len >= 16) {
                this->addr = copyin(self->recvfrom_addr_ptr, this->addr_len);
                this->family = *(uint8_t*)((char*)this->addr + 1);
                
                if (this->family == 2) {
                    /* IPv4 –∏—Å—Ç–æ—á–Ω–∏–∫ */
                    this->port = *(uint16_t*)((char*)this->addr + 2);
                    this->port = ((this->port & 0xFF) << 8) | ((this->port >> 8) & 0xFF);
                    this->ip = *(uint32_t*)((char*)this->addr + 4);
                    printf("  <- üéØ FROM IPv4: %d.%d.%d.%d:%d",
                           this->ip & 0xFF, (this->ip >> 8) & 0xFF,
                           (this->ip >> 16) & 0xFF, (this->ip >> 24) & 0xFF,
                           this->port);
                    connection_count++;
                }
                else if (this->family == 30) {
                    /* IPv6 –∏—Å—Ç–æ—á–Ω–∏–∫ */
                    this->port = *(uint16_t*)((char*)this->addr + 2);
                    this->port = ((this->port & 0xFF) << 8) | ((this->port >> 8) & 0xFF);
                    printf("  <- üéØ FROM IPv6 –ø–æ—Ä—Ç: %d", this->port);
                    connection_count++;
                }
                else if (this->family == 1) {
                    printf("  <- Unix socket");
                }
                else {
                    printf("  <- –°–µ–º–µ–π—Å—Ç–≤–æ: %d", this->family);
                }
            } else if (this->addr_len > 0) {
                printf("  <- –ö–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–¥–ª–∏–Ω–∞: %d)", this->addr_len);
            }
        }
        
        /* –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏ */
        self->recvfrom_addr_ptr = 0;
        self->recvfrom_addr_len_ptr = 0;
    }
}

/* –ü–µ—Ä–µ—Ö–≤–∞—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ */
syscall::dup:entry {
    if (IS_TRACKED_PID(pid)) {
        printf("DUP [PID %d]: —Å—Ç–∞—Ä—ã–π_FD=%d", pid, arg0);
        self->dup_old_fd = arg0;
    }
}

syscall::dup:return {
    if (IS_TRACKED_PID(pid) && self->dup_old_fd != 0) {
        if (arg1 >= 0) {
            printf("‚úÖ DUP_SUCCESS [PID %d]: %d -> %d", 
                   pid, self->dup_old_fd, arg1);
            
            /* –ï—Å–ª–∏ –¥—É–±–ª–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤–æ–π —Å–æ–∫–µ—Ç, –æ—Ç–º–µ—á–∞–µ–º —ç—Ç–æ */
            if (self->dup_old_fd >= 3) {  /* –ò—Å–∫–ª—é—á–∞–µ–º stdin/stdout/stderr */
                printf("  -> üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Å–æ–∫–µ—Ç: FD %d —Ç–µ–ø–µ—Ä—å –¥—É–±–ª–∏—Ä—É–µ—Ç FD %d", 
                       arg1, self->dup_old_fd);
            }
        } else {
            printf("‚ùå DUP_FAILED [PID %d]: FD=%d, error=%d", 
                   pid, self->dup_old_fd, arg1);
        }
        self->dup_old_fd = 0;
    }
}

syscall::dup2:entry {
    if (IS_TRACKED_PID(pid)) {
        printf("DUP2 [PID %d]: %d -> %d", pid, arg0, arg1);
        self->dup2_old_fd = arg0;
        self->dup2_new_fd = arg1;
    }
}

syscall::dup2:return {
    if (IS_TRACKED_PID(pid) && self->dup2_old_fd != 0) {
        if (arg1 >= 0) {
            printf("‚úÖ DUP2_SUCCESS [PID %d]: %d -> %d", 
                   pid, self->dup2_old_fd, self->dup2_new_fd);
            
            /* –û—Å–æ–±–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –µ—Å–ª–∏ –∫–æ–ø–∏—Ä—É–µ–º –≤ –≤—ã—Å–æ–∫–∏–µ –Ω–æ–º–µ—Ä–∞ FD */
            if (self->dup2_new_fd > 10) {
                printf("  -> üìã –°–æ–∫–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: FD %d = –∫–æ–ø–∏—è FD %d", 
                       self->dup2_new_fd, self->dup2_old_fd);
            }
        } else {
            printf("‚ùå DUP2_FAILED [PID %d]: %d -> %d, error=%d", 
                   pid, self->dup2_old_fd, self->dup2_new_fd, arg1);
        }
        self->dup2_old_fd = 0;
        self->dup2_new_fd = 0;
    }
}

/* –¢–∞–∫–∂–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–º fcntl —Å F_DUPFD - –µ—â–µ –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è */
syscall::fcntl:entry {
    if (IS_TRACKED_PID(pid) && (arg1 == 0 || arg1 == 1030)) {
        /* F_DUPFD = 0, F_DUPFD_CLOEXEC = 1030 (–Ω–∞ macOS) */
        printf("FCNTL_DUPFD [PID %d]: FD=%d, cmd=%d, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π_FD=%d", 
               pid, arg0, arg1, arg2);
        self->fcntl_old_fd = arg0;
        self->fcntl_cmd = arg1;
    }
}

syscall::fcntl:return {
    if (IS_TRACKED_PID(pid) && self->fcntl_old_fd != 0) {
        if (arg1 >= 0) {
            printf("‚úÖ FCNTL_DUPFD_SUCCESS [PID %d]: %d -> %d (cmd=%d)", 
                   pid, self->fcntl_old_fd, arg1, self->fcntl_cmd);
            
            if (arg1 > 10) {
                printf("  -> üìã Fcntl —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª —Å–æ–∫–µ—Ç: FD %d = –∫–æ–ø–∏—è FD %d", 
                       arg1, self->fcntl_old_fd);
            }
        } else {
            printf("‚ùå FCNTL_DUPFD_FAILED [PID %d]: FD=%d, error=%d", 
                   pid, self->fcntl_old_fd, arg1);
        }
        self->fcntl_old_fd = 0;
        self->fcntl_cmd = 0;
    }
}

tick-60s {
    printf("=== ‚è∞ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ú–ò–ù–£–¢–£ ===");
    printf("–í—Å–µ–≥–æ IP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: %d", connection_count);
}

END {
    printf("=== –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù ===");
    printf("–ò—Ç–æ–≥–æ IP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: %d", connection_count);
}
EOF

chmod +x "$GENERATED_SCRIPT"

# Cleanup on exit
cleanup() {
    if [[ "$KEEP_SCRIPT" == "false" && -f "$GENERATED_SCRIPT" ]]; then
        rm -f "$GENERATED_SCRIPT"
    elif [[ "$KEEP_SCRIPT" == "true" ]]; then
        echo "üîß Generated script saved: $GENERATED_SCRIPT"
    fi
}
trap cleanup EXIT

echo "=== Monitoring settings ==="
echo "Root PIDs: ${VALID_PIDS[*]}"
echo "Output file: $OUTPUT_FILE"
echo "=============================="
echo ""

echo "Starting monitoring of root PIDs and their descendants..."
echo "Press Ctrl+C to stop"
echo ""

dtrace -o "$OUTPUT_FILE" -C -s "$GENERATED_SCRIPT"

if [[ -f "$OUTPUT_FILE" ]]; then
    echo ""
    echo "=== Results ==="
    echo "üìÑ File: $OUTPUT_FILE"
    echo "üìä Lines: $(wc -l < "$OUTPUT_FILE")"
    echo ""
    echo "üéØ IP connections:"
    grep -o "IPv4: [0-9.]*:[0-9]*" "$OUTPUT_FILE" | sort | uniq -c | sort -nr || echo "No IPs found"
    echo ""

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞
    unique_ips=$(grep -o "IPv4: [0-9.]*:[0-9]*" "$OUTPUT_FILE" 2>&1 | \
                sed 's/IPv4: //' | \
                cut -d':' -f1 | \
                sort -u)
    
    total_ips=$(echo "$unique_ips" | wc -l)

    if [ "$total_ips" -ne 0 ]; then
        echo "üéØ Mikrotik firewall list:"
        echo "/ip firewall address-list"
        echo "$unique_ips" | while IFS= read -r ip; do
            if [[ -n "$ip" ]]; then
                echo "add address=$ip list=vpn_traffik"
            fi
        done
        echo ""
    fi

    echo "üìã Unique ips: $total_ips"
fi